#include <string.h>
#include <SoftwareSerial.h>

SoftwareSerial gpsSerial(2, 3); // RX, TX
char lat[20];            // latitude array
char lg[20];             // longitude array
char time[20];
char date[20];
void Receive_GPS_Data();
int sensor(void);
  
  /*******************GSM INITIALISATIONS*********************/
char Rec_Data=0;
byte msg_flg=0;
byte msg_flag_2=0;
byte call_flag=0;
byte reply_flag=0;
byte delete_flag=0;
byte d_count=0;
byte i=0;
byte j=0;
char number[15];
char message[159];
void modem_initialization(void);
void gsm_send_message(void);
void clear_rx_buffer(void);
  
  
/**************************************************************************************
  Function    : setup()
  Description : Use it to initialize variables, pin modes, start using libraries, etc.
                The setup function will only run once, after each power up or reset
                of the Arduino board.
**************************************************************************************/
  void setup()
  {
    Serial.begin(9600);   // opens serial port, sets data rate to 9600 bps
    gpsSerial.begin(9600);
    modem_initialization();
    pinMode(8,OUTPUT);
    digitalWrite(8,LOW);
    pinMode(9,OUTPUT);
    digitalWrite(9,LOW);
    pinMode(10,OUTPUT);
    digitalWrite(10,LOW);
  }
 
/************************************************************************************
  Function    : loop()
  Description : loops consecutively, allowing your program to change and respond.
                Use it to actively control the Arduino board.
***************************************************************************************/
  void loop(){
    digitalWrite(8,HIGH);
    if(sensor()==1){
      digitalWrite(9,HIGH);
      digitalWrite(10,HIGH);
      Receive_GPS_Data(); 
      strcpy(message,"Emergency: An accident occurred to KL 10 1222 at");   //strcpy() function is used to copy a string to character array
      strcat(message,"\n");    //strcat() function is used to put a string at the end of a character array
      strcat(message,"Latitude:");
      double a=atof(lat);
      a /= 100;
      unsigned int a1=a;
      double a2=a-a1;
      a2 = (a2/6)*10;
      a=a1+a2;
      dtostrf(a,3,5,lat);
      strcat(message,lat);
      strcat(message,"\n");
      strcat(message,"Longitude:");
      a=atof(lg);
      a /= 100;
      a1=a;
      a2=a-a1;
      a2 = (a2/6)*10;
      a=a1+a2;
      dtostrf(a,3,5,lg);
      int hour=(time[0]-'0')*10+(time[1]-'0');
      int minute=(time[2]-'0')*10+(time[3]-'0');
      if (hour>19){
        hour =hour-19;
        }
      else{
        hour += 5;
        }
      if (minute>=30){
        hour++;
        minute = minute-30;
        }
      else{
        minute += 30;
        }
      int second=(time[4]-'0')*10+time[5]-'0';
      strcat(message,lg);
      strcat(message,"\n");
      strcat(message,"Time:");
      sprintf(time,"%d:%d:%d",hour,minute,second);
      strcat(message,time);
      strcat(message,"\n");
      //converting date from ddmmyy format to dd/mm/yyyy format
      date[9]=date[5];
      date[8]=date[4];
      date[7]='0';
      date[6]='2';
      date[5]='/';
      date[4]=date[3];
      date[3]=date[2];
      date[2]='/';   //date 1 and 2 as it is
      date[10]='\0'; //end of string
      strcat(message,"Date:");
      strcat(message,date);
      strcpy(number,"+919947149436");
      gsm_send_message();
      strcpy(number,"+918050486828");
      gsm_send_message();
     // strcpy(number,"+919037928239");
      //gsm_send_message();
      while(1){
        digitalWrite(9,LOW);
        digitalWrite(8,HIGH);
        digitalWrite(10,LOW);
        delay(250);
        digitalWrite(9,HIGH);
        digitalWrite(8,LOW);
        digitalWrite(10,HIGH);
        delay(250);
      } 
      
    }
  }
  
int sensor(){
const int knockSensor = A0; 
const int threshold = 100; //to adjust sensor
int sensorReading = 0;      
sensorReading = analogRead(knockSensor);    
  if (sensorReading >= threshold) {
    return 1;       
  }
  else 
    return 0;
}
/************************************************************************************
  Function    : Receive_GPS_Data()
  Description : finding Latitudse and longitude from GPRMC message
 
************************************************************************************/
  void Receive_GPS_Data(){
  int Gpsdata;             // for incoming serial data
  unsigned int finish =0;  // indicate end of message
  unsigned int pos_cnt=0;  // position counter
  unsigned int lat_cnt=0;  // latitude data counter
  unsigned int log_cnt=0;  // longitude data counter
  unsigned int time_cnt=0;  // longitude data counter
  unsigned int flg    =0;  // GPS flag
  unsigned int com_cnt=0;  // comma counter
  unsigned int date_cnt=0;
    while(finish==0){
      while(gpsSerial.available()>0){         // Check GPS data
        Gpsdata = gpsSerial.read();
        flg = 1;
       if( Gpsdata=='$' && pos_cnt == 0)   // finding GPRMC header
         pos_cnt=1;
       if( Gpsdata=='G' && pos_cnt == 1)
         pos_cnt=2;
       if( Gpsdata=='P' && pos_cnt == 2)
         pos_cnt=3;
       if( Gpsdata=='R' && pos_cnt == 3)
         pos_cnt=4;
       if( Gpsdata=='M' && pos_cnt == 4)
         pos_cnt=5;
       if( Gpsdata=='C' && pos_cnt==5 )
         pos_cnt=6;
       if(pos_cnt==6 &&  Gpsdata ==','){   // count commas in message
         com_cnt++;
         flg=0;
       }
       
       if(com_cnt==1 && flg==1){
        time[time_cnt++] =  Gpsdata;         // latitude
        flg=0;
       }
       
       if(com_cnt==3 && flg==1){
        lat[lat_cnt++] =  Gpsdata;         // latitude
        flg=0;
       }
 
       if(com_cnt==5 && flg==1){
         lg[log_cnt++] =  Gpsdata;         // Longitude
         flg=0;
       }
       if(com_cnt==9 && flg==1){
         date[date_cnt++] =  Gpsdata;         // Longitude
         flg=0;
       }
 
       if( Gpsdata == '*' && com_cnt >= 5){
         com_cnt = 0;                      // end of GPRMC message
         lat_cnt = 0;
         log_cnt = 0;
         time_cnt= 0;
         date_cnt=0;
         flg     = 0;
         finish  = 1;
         
      }
    }
}
}

/**********************************************************************************************************************************************************************************
***********************************************************************************************************************************************************************************
Function Name : GSM_SEND_MESSAGE
Function used to send message  
Variables :-
sent           :To check the status of message sending process
reply_flag     :Must be cleared ,no need to check after a meessage
send_flag      :To ensure sucessful messge which is cleared only after message sent
msg_flg        :To check message reading steps
task_control   :To prevent other functions execution in the time of sending message
Arguments :-
            No arguments
Return    :-
            No returns
***********************************************************************************************************************************************************************************
**********************************************************************************************************************************************************************************/
void gsm_send_message(void){
byte send_flag=1;
byte msg_flg=0;
char rec_data=0;
delay(300);
clear_rx_buffer();//clearing receiving buffer
Serial.print("AT+CMGS=");//Command to send message ,(AT+CMGS="+91phone number"<enter>)
Serial.print('"');
Serial.print(number);
Serial.println('"');
while(send_flag == 1)
{
while(Serial.available() > 0)  
{
rec_data = Serial.read();
if(rec_data =='>')//'>'(greater than symbol) is received while message sending,after AT+CMGD="number" command
{
  delay(400);//Delay for GSM module become ready
  Serial.print(message);//Transmitting whole string to be sent as SMS
  Serial.write(26);//'ctrl+z' command
  delay(300);//Delay for GSM module become ready
  msg_flg=0;
}
else if(rec_data == '+' && msg_flg == 0 )//'+' is received                  
   msg_flg = 1 ;  
else if(rec_data == 'C' && msg_flg == 1 )//'C' is received
   msg_flg = 2 ;
else if(rec_data == 'M' && msg_flg == 2 )//'M' is received
   msg_flg = 3 ;
else if(rec_data == 'G' && msg_flg == 3 )//'G' is received
   msg_flg = 4 ;
else if(rec_data == 'S' && msg_flg == 4 )//'S' is received after a successful message("+CMSGS:  ")
   msg_flg = 5 ;
else if(rec_data == ':' && msg_flg == 5 )// ':' is received
   msg_flg = 6 ;
else if(rec_data == 0x0D && msg_flg == 6 )//Carriage return
   msg_flg = 7 ;
else if(rec_data == 0x0A && msg_flg == 7 )//Line feed
   msg_flg = 8 ;
else if(rec_data == '0' && msg_flg == 8 )// '0' (zero) is received
{
   clear_rx_buffer();//clearing receiving buffer
     msg_flg=0;
     msg_flag_2=0;
     send_flag=0;
     reply_flag=0;
  }
else if ( rec_data == '4' && msg_flg == 0  )// '4' (zero) is received
{
  clear_rx_buffer();//clearing receiving buffer
    msg_flg=0;
    msg_flag_2=0;
    send_flag=0;
    reply_flag=0;
}
else if( Rec_Data == '2' && msg_flg == 0 )// '2' is received,incoming call
{
call_flag=1;
delay(300);
Serial.println("ATH");//Command for hang up incoming call,all calls must be filtered no need to answer a call
}  
else if( Rec_Data=='0' && msg_flg == 0 && call_flag == 1 )// '0' (zero) is received,call successfully rejected
{
     msg_flg=0;
     call_flag=0;
     msg_flag_2=0;
     d_count=0;
     send_flag=0;
     reply_flag=0;
}
 
}
}
}

void modem_initialization(void)
{
  char rec_data;
  byte network_status = 0 ;//network_status initialized as zero
  byte status_check = 0 ;//status_check initialized as zero
  byte gsm_cnt = 0;//gsm_cnt initialized as zero
  byte ok_flag=0;//ok_flag initialized as zero
  byte count=0;//count initialized as zero
  clear_rx_buffer();//clearing receiving buffer
  while(gsm_cnt < 5)// repeat entire loop until gsm_cnt less than seven
  {                                  
   switch(gsm_cnt)
   {
     case 0: clear_rx_buffer();//clearing receiving buffer
     Serial.println("AT");// Attention command to wake up GSM modem
     delay(1000);
     break;
     case 1: clear_rx_buffer();//clearing receiving buffer
     Serial.println("ATE0");//Command for disable echo
     delay(1000);
     break;
     case 2: clear_rx_buffer();//clearing receiving buffer
     Serial.println("ATV0");// Command for numeric response after this '0'(zero) will be recieved instead of "OK"
     delay(1000);
     break;
     case 3: clear_rx_buffer();//clearing receiving buffer
     Serial.println("AT&W");// Command TO SAVE SETTINGS
     delay(1000);
     break;    
     case 4: gsm_cnt = 5;// exit from the loop
     break;
     default :break;
   }    
while(Serial.available() > 0)
{                  
   rec_data = Serial.read();
   if(rec_data == 'O' )// 'o' is received
   ok_flag = 1;
  else if(ok_flag == 1 && rec_data == 'K' )// 'K' is received
  {
   gsm_cnt ++;
   ok_flag = 0;
  }
  else if (rec_data == '0' )// '0'(zero) is received (numeric response)
  {
    gsm_cnt ++;
    ok_flag = 0;
  }
  else if (rec_data == '+' )// '+' is received message
  {
    clear_rx_buffer();//clearing receiving buffer
    if( gsm_cnt > 0 )
     gsm_cnt --;
  }
}
}

gsm_cnt = 0;
ok_flag = 0;
while(network_status == 0 )//wait for PIN READY
{
   if(status_check == 0 )
   {
    delay(1000);
    status_check = 1 ;
    clear_rx_buffer();//clearing receiving buffer
    Serial.println("AT+CPIN?"); //checking PIN return ready(+CPIN: READY) with a valid simcard otherwise error
   }
   while(Serial.available() > 0)  
   {
     rec_data = Serial.read();
     if( rec_data == '+' && status_check == 1 )// '+' is received
     status_check = 2 ;
     else if( rec_data == 'C' && status_check == 2 )// 'C' is received
     status_check = 3 ;
     else if( rec_data == 'P' && status_check == 3 )// 'P' is received
     status_check = 4 ;
     else if( rec_data == 'I' && status_check == 4 )// 'I' is received
     status_check = 5 ;
     else if( rec_data == 'N' && status_check == 5 )// 'N' is received
     status_check = 6 ;
     else if( rec_data == ':' && status_check == 6 )// ':' is received
     status_check = 7 ;
     else if( rec_data == ' ' && status_check == 7 )// ' ' is received
     status_check = 8 ;
     else if( rec_data == 'R' && status_check == 8 )// 'R' is received
     status_check = 9 ;
     else if( rec_data == 'E' && status_check == 9 )// 'E' is received
     status_check = 10 ;
     else if( rec_data == 'A' && status_check == 10 )// 'A' is received
     status_check = 11 ;
     else if( rec_data == 'D' && status_check == 11 )// 'D' is received
     status_check = 12 ;
     else if( rec_data == 'Y' && status_check == 12 )// 'Y' is received
     status_check = 13 ;
     else if( rec_data == 0X0D && status_check == 13 )//Carriage return
     status_check = 14 ;
     else if( rec_data == 0X0A && status_check == 14 )//Line Feed
     status_check = 15 ;
     else if( rec_data == '0' && status_check == 15 )// '0' is received
     {
      clear_rx_buffer();//clearing receiving buffer
      status_check = 0 ;
      network_status=1;//goto next step
     }
     else if( rec_data != 'R' && status_check == 8 )//+CPIN: NOT READY
     {
       clear_rx_buffer();//clearing receiving buffer
       status_check = 0 ;
       network_status=0;//repeat current step
     }
     else if( rec_data == 'M' && status_check == 3 )// in case of any message
     {
       clear_rx_buffer();//clearing receiving buffer
       status_check = 0 ;
       network_status=0;//repeat current step
     }
 
   }
 
}


while(network_status == 1 )//wait for SIM network registration
{
  if(status_check == 0 )
  {
     delay(1000);
     status_check = 1 ;
     clear_rx_buffer();//clearing receiving buffer
     Serial.println("AT+CREG?"); //checking for SIM card registration ,if registered "+CREG: 0,1" will receive
  }
  while(Serial.available() > 0)  
  {
     rec_data = Serial.read();
     if( rec_data == '+' && status_check == 1 )// '+' is received
     status_check = 2 ;
     else if( rec_data == 'C' && status_check == 2 )// 'C' is received
     status_check = 3 ;
     else if( rec_data == 'R' && status_check == 3 )// 'R' is received
     status_check = 4 ;
     else if( rec_data == 'E' && status_check == 4 )// 'E' is received
     status_check = 5 ;
     else if( rec_data == 'G' && status_check == 5 )// 'G' is received
     status_check = 6 ;
     else if( rec_data == ':' && status_check == 6 )// ':' is received
     status_check = 7 ;
     else if( rec_data == ' ' && status_check == 7 )// ' ' is received
     status_check = 8 ;
     else if( rec_data == '0' && status_check == 8 )// '0' is received
     status_check = 9 ;
     else if( rec_data == ',' && status_check == 9 )// ',' is received
     status_check = 10 ;
     else if( rec_data == '1' && status_check == 10 )// '1' is received
     status_check = 11 ;
     else if( rec_data == 0X0D && status_check == 11 )//Carriage return
     status_check = 12 ;
     else if( rec_data == 0X0A && status_check == 12 )//Line Feed
     status_check = 13 ;
     else if( rec_data == '0' && status_check == 13 )// '0' is received
     {
         clear_rx_buffer();//clearing receiving buffer
         status_check = 0 ;
         network_status=2;//goto next step
     }
     else if( rec_data != '1' && status_check == 10 )// +CREG: 0,2 not registered
     {
         clear_rx_buffer();//clearing receiving buffer
         status_check = 0 ;
         network_status=1;//repeat current step
     }
     else if( rec_data == 'M' && status_check == 3 )// in case of any message
     {
         clear_rx_buffer();//clearing receiving buffer
         status_check = 0 ;
         network_status=1;//repeat current step
     }
   }
}
gsm_cnt=0;

while(gsm_cnt < 4)// repeat entire loop until gsm_cnt less than nine
{
     switch(gsm_cnt)
     {
          case 0: clear_rx_buffer();//clearing receiving buffer
          Serial.println("AT+CMGF=1");// Attention command to wake up GSM modem
          delay(1000);
          break;
          case 1: clear_rx_buffer();//clearing receiving buffer
          Serial.println("AT+CNMI=2,1,0,0,0");//Command to configure new message indication
          delay(1000);
          break;
          case 2: clear_rx_buffer();//clearing receiving buffer
          Serial.println("AT+CMGD=1,4");// Command to delete all received messages
          delay(1000);
          break;
          case 3: gsm_cnt = 4;// exit from the loop
          break;
          default :break;
     }    
     while(Serial.available() > 0)
     {                  
          rec_data = Serial.read();
          if (rec_data == '0' )// '0'(zero) is received (numeric response)
          {
             gsm_cnt ++;
          }
         else if (rec_data == '+'  )// '+' received ,before "AT+CIICR" command,may be any message
         {
            clear_rx_buffer();//clearing receiving buffer
            if( gsm_cnt > 0 )
            gsm_cnt --;
         }
        else if (rec_data == '4' && gsm_cnt > 2)// '4' received (error),in gprs initialization commands
         {
            clear_rx_buffer();//clearing receiving buffer
            gsm_cnt = 4;
         }  
      }
  }
gsm_cnt = 0;
}


/**********************************************************************************************************************************************************************************
**********************************************************************************************************************************************************************************
Function Name : CLEAR_RX_BUFFER
Function used to clear receiving buffer
Variables :-
            rec_data        :variable which hold received data
Arguments :-
            No arguments
Return    :-
            No returns
***********************************************************************************************************************************************************************************
**********************************************************************************************************************************************************************************/
 
void clear_rx_buffer(void)
{
char rec_data=0;
while(Serial.available() > 0)
rec_data = Serial.read();  
}

/**********************************************************************************************************************************************************************************
**********************************************************************************************************************************************************************************
Function Name : ARRAY_CLEAR
Function used to clearing message,user_id and number arrays
Variables :-
            k        :array index
Arguments :-
            No arguments
Return    :-
            No returns
***********************************************************************************************************************************************************************************
**********************************************************************************************************************************************************************************/
void array_clear(void)
{
  byte k=0;  
  for( k=0;k<=15;k++)
    number[k]='\0';
  for( k=0;k<=63;k++)
    message[k]='\0';
}



